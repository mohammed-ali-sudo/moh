// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: drug_events.proto

package gapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExecsService_AddDrug_FullMethodName    = "/drug.ExecsService/AddDrug"
	ExecsService_UpdateDrug_FullMethodName = "/drug.ExecsService/UpdateDrug"
)

// ExecsServiceClient is the client API for ExecsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// You will call this on another service.
type ExecsServiceClient interface {
	AddDrug(ctx context.Context, in *DrugOut, opts ...grpc.CallOption) (*ConfirmMessage, error)
	UpdateDrug(ctx context.Context, in *DrugOut, opts ...grpc.CallOption) (*ConfirmMessage, error)
}

type execsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecsServiceClient(cc grpc.ClientConnInterface) ExecsServiceClient {
	return &execsServiceClient{cc}
}

func (c *execsServiceClient) AddDrug(ctx context.Context, in *DrugOut, opts ...grpc.CallOption) (*ConfirmMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmMessage)
	err := c.cc.Invoke(ctx, ExecsService_AddDrug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execsServiceClient) UpdateDrug(ctx context.Context, in *DrugOut, opts ...grpc.CallOption) (*ConfirmMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmMessage)
	err := c.cc.Invoke(ctx, ExecsService_UpdateDrug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecsServiceServer is the server API for ExecsService service.
// All implementations must embed UnimplementedExecsServiceServer
// for forward compatibility
//
// You will call this on another service.
type ExecsServiceServer interface {
	AddDrug(context.Context, *DrugOut) (*ConfirmMessage, error)
	UpdateDrug(context.Context, *DrugOut) (*ConfirmMessage, error)
	mustEmbedUnimplementedExecsServiceServer()
}

// UnimplementedExecsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExecsServiceServer struct {
}

func (UnimplementedExecsServiceServer) AddDrug(context.Context, *DrugOut) (*ConfirmMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDrug not implemented")
}
func (UnimplementedExecsServiceServer) UpdateDrug(context.Context, *DrugOut) (*ConfirmMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDrug not implemented")
}
func (UnimplementedExecsServiceServer) mustEmbedUnimplementedExecsServiceServer() {}

// UnsafeExecsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecsServiceServer will
// result in compilation errors.
type UnsafeExecsServiceServer interface {
	mustEmbedUnimplementedExecsServiceServer()
}

func RegisterExecsServiceServer(s grpc.ServiceRegistrar, srv ExecsServiceServer) {
	s.RegisterService(&ExecsService_ServiceDesc, srv)
}

func _ExecsService_AddDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrugOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecsServiceServer).AddDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecsService_AddDrug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecsServiceServer).AddDrug(ctx, req.(*DrugOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecsService_UpdateDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrugOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecsServiceServer).UpdateDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecsService_UpdateDrug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecsServiceServer).UpdateDrug(ctx, req.(*DrugOut))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecsService_ServiceDesc is the grpc.ServiceDesc for ExecsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drug.ExecsService",
	HandlerType: (*ExecsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDrug",
			Handler:    _ExecsService_AddDrug_Handler,
		},
		{
			MethodName: "UpdateDrug",
			Handler:    _ExecsService_UpdateDrug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drug_events.proto",
}
